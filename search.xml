<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[如何使用Visual Studio将传统桌面程序转制为UWP程序]]></title>
      <url>%2F2018%2F06%2F02%2Fconver-win32-to-uwp%2F</url>
      <content type="text"><![CDATA[Desktop Bridge是内置于平台中的基础架构，借助它，可以使用现代化的 Windows 应用包来分发Windows Forms、WPF 或 Win32 桌面应用或游戏。优点通过将Windows 桌面程序转制为Windows 10 UWP应用包有下面的优点：简化部署。使用此Desktop Bridge的应用和游戏都具有出色的部署体验。 这体验确保用户可以放心地安装应用，并对其进行更新。如果用户选择卸载应用，则将完全删除它，不会留下任何痕迹。 这能减少编写设置体验的时间，并使用户使用最新应用。自动更新和许可。你的应用能够参与 Microsoft Store 的内置许可和自动更新设施。 自动更新是高度可靠和高效的机制，因为仅下载文件的已更改部分。扩大覆盖范围并简化盈利过程。选择通过 Microsoft Store进行分发可将覆盖范围扩大至数以百万的 Windows10用户，这些用户可以通过当地支付选项获取应用、游戏和应用内商品。添加 UWP 功能。你可以按照自己的节奏向应用的程序包添加 UWP 功能，如 XAML 用户界面、动态磁贴更新、UWP 后台任务、应用服务以及许多其他功能。拓展跨设备用例。通过使用桥，可以将代码逐渐迁移到通用 Windows 平台，以覆盖所有的 Windows10 设备，包括手机、Xbox One 和 HoloLens。环境需求Desktop Bridge是在 Windows 10 版本 1607 中引入，它仅可用于面向 Windows 10 周年更新（10.0；版本 14393）或 Visual Studio 更高版本的项目中。准备开发者在将应用打包为UWP引用之前需要下面相关任务的代码：你的应用使用早于 4.6.1 的 .NET 版本。 仅 .NET 4.6.1 受支持。 在进行打包之前，需要将应用重定目标到 .NET 4.6.1。应用始终使用提升的安全权限运行。 你的应用需要在以交互用户身份运行时工作。 从 Windows 应用商店安装应用的用户可能不是系统管理员，因此需要应用以提升的权限运行意味着它无法为标准用户正确运行。应用需要内核模式驱动程序或 Windows 服务。 该桥适用于应用，但不支持内核模式驱动程序或需要在系统帐户下运行的 Windows 服务。 使用后台任务，而不是 Windows 服务。在进程内将应用的模块加载到不在 Windows 应用包中的进程。 不允许此操作，这意味着不支持进程中扩展，如 shell 扩展。 但是，如果你在同一个程序包中有两个应用，则可以在它们之间执行进程间通信。应用使用自定义的应用程序用户模型 ID (AUMID)。 如果进程调用 SetCurrentProcessExplicitAppUserModelID 以设置其自己的 AUMID，则它可能仅使用应用模型环境/Windows 应用包为其生成的 AUMID。 无法定义自定义 AUMID。应用修改 HKEY_LOCAL_MACHINE (HKLM)注册表配置单元。 应用的任何创建 HKLM 键或打开一个键以进行修改的尝试都会导致拒绝访问失败。 请记住，应用具有其自己的注册表专用虚拟化视图，因此用户范围和计算机范围的注册表配置单元（即 HKLM 的本质）的想法不适用。 你将需要找到另一种方法来实现 HKLM 的用途，如改为写入 HKEY_CURRENT_USER (HKCU)。应用使用 ddeexec注册表子项作为启动另一个应用的方式。 改为使用应用程序包清单中的各种可激活扩展配置的 DelegateExecute 谓词处理程序之一。你的应用会写入 AppData文件夹或注册表，目的是与其他应用共享数据。 转换后，AppData将重定向到本地应用数据存储，该存储是每个 UWP 应用的专用应用商店。你的应用将写入 HKEY_LOCAL_MACHINE注册表配置单元的所有条目都将重定向到隔离的二进制文件中，你的应用写入 HKEY_CURRENT_USER注册表配置单元的任何条目都将按用户、按应用放入专用位置中。 有关文件和注册表重定向的更多详细信息，请参阅在桌面桥幕后。使用不同的进程间数据共享方式。 有关详细信息，请参阅存储和检索设置以及其他应用数据。应用写入应用的安装目录。 例如，应用写入与你的 exe放置在同一个目录中的日志文件。 此操作不受支持，因此你需要找到另一个位置，如本地应用数据存储。应用安装需要用户交互。 应用安装程序必须能够在无提示的情况下运行，并且它必须安装默认不在干净操作系统映像中的所有先决条件。应用使用当前工作目录。 在运行时，打包的桌面应用不会得到你之前在桌面 .LNK 快捷方式中指定的相同工作目录。 如果具有正确的目录对应用正常运行很重要，你需要在运行时更改 CWD。应用需要UIAccess。 如果应用程序在UAC清单的 requestedExecutionLevel 元素中指定UIAccess=true，则当前不支持转换为 UWP。 有关详细信息，请参阅 UI 自动化安全概述。应用公开COM对象。 来自程序包内的进程和扩展可以注册并使用 COM和 OLE服务器，进程内和进程外 (OOP) 皆可。 创意者更新添加了打包的COM支持，它提供注册 OOP COM和 OLE服务器（现在这些服务器在包外部可见）的功能。 请参阅对桌面桥的COM 服务器和 OLE 文档支持。打包的 COM支持适用于现有的COM API，但不适用于依赖直接读取注册表的应用程序扩展，因为打包的 COM 位于一个专用位置。应用公开GAC程序集以供其他进程使用。 在当前版本中，应用无法公开 GAC 程序集以供来自 Windows 应用包外部可执行文件的进程使用。 来自程序包内的进程可以照常注册和使用 GAC 程序集，但它们在外部将不可见。 这意味着，OLE 等互操作方案在被外部进程调用时不起作用。你的应用正以不受支持的方式链接C 运行时库 (CRT)。 Microsoft C/C++ 运行时库提供用于为 Microsoft Windows 操作系统编程的例程。 这些例程自动执行许多不采用 C 和 C++ 语言提供的常见编程任务。 如果你的应用利用 C/C++ 运行时库，你需要确保它以受支持的方式链接。其他具体内容参考微软官方文档：Windows 开发中心开始这里以一个简单的WPF Helllo World程序来示例。运行环境：Windows 10 1803Visual Studio Professional 2017 15.7.3新建WPF程序。注意，这里需要将.NET Framework的版本选择为4.6.1以上，如果系统中没有4.6.1以上的版本,通过Visual Studio Installer来以组件的形式安装高版本的.NET Framework。填充代码在MainWindow.xaml文件中填写一个Button以及其点击的事件。123456789101112131415&lt;Window x:Class="HelloWorldDemo.MainWindow" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:local="clr-namespace:HelloWorldDemo" mc:Ignorable="d" Title="MainWindow" Height="450" Width="800"&gt; &lt;Grid&gt; &lt;Button HorizontalAlignment="Center" VerticalAlignment="Center" Content="Click Me" Click="Button_Click"/&gt; &lt;/Grid&gt;&lt;/Window&gt;在MainWindow.xaml.cs中填写View视图中Button的逻辑事件,这里，我们简单地将这个Button点击事件处理为弹出一个Hello World！的消息框。1234567891011121314151617181920using System.Windows;namespace HelloWorldDemo&#123; /// &lt;summary&gt; /// Interaction logic for MainWindow.xaml /// &lt;/summary&gt; public partial class MainWindow : Window &#123; public MainWindow() &#123; InitializeComponent(); &#125; private void Button_Click(object sender, RoutedEventArgs e) &#123; MessageBox.Show("Hello World!"); &#125; &#125;&#125;打包前测试运行在打包为UWP程序之前，我们执行上面新建的WPF程序，效果如图。正如我们所写的那样，点击这个Button，能弹出Hello World！的消息框了。新建UWP打包项目在当前的解决方案上右键Add-&gt;New Project,然后Windows Universal内容中选择Windows Application Packaging Project。继续选择Target version和Minimum version，这里以最低15063，最高17143为例子，如果选择了系统中没有的Windows SDK的，会提示下载SDK。添加引用在新建的UWP打包项目的Applications右键来添加同解决方案下WPF项目的引用。设置入口点将Applicatons下刚添加的引用设置为入口点。重新构建解决方案右键Rebuild启动重新构建，一般情况下没有出错即可。创建App包打包程序右键，Store-&gt;Create App Packages...,在弹出的对话框中选择打包为Sideloading 旁加载然后，等待打包完成。UWP测试运行在项目文件夹中AppPackages的WapProjTemplate_1.0.0.0_Debug_Test中可以看到，其中有cer证书文件，appxbundleUWP安装程序文件,Add-AppDevPackage.ps1PowerShell安装批处理，以及其他文件。这里，右键这里PowerShell批处理文件，选择使用PowerShell 运行，安装过程中提示需要管理员权限，全部Y即可。安装完成后即可在开始菜单看到刚打包的UWP程序，点击运行。执行效果和之前运行的一样。参考文献：微软官方开发文档]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Nginx 将网站完全重定向到'www'、'https']]></title>
      <url>%2F2018%2F03%2F03%2Fnginx-redirect%2F</url>
      <content type="text"><![CDATA[Nginx (engine x) 是一个高性能的 HTTP 和反向代理服务器，也是一个 IMAP/POP3/SMTP 服务器。检查Nginx的版本在服务器Terminal终端输入以下命令并回车：1nginx -v本次测试的Nginx版本是：1nginx version: nginx/1.10.3 (Ubuntu)本次测试使用的是Ubuntu服务器。修改Nginx配置文件用vim打开Nginx的配置文件：1sudo vim /etc/nginx/sites-available/default同时需要输入root管理员密码。如果我们要将带下面host的请求123http://mxvar.comhttp://www.mxvar.com/https://mxvar.com均重定向跳转到下面的host的请求上1https://www.mxvar.com也就是将所有不带www或https的请求均重定向跳转到既带www,又带https的请求上。合并80端口请求将www.mxvar.com和mxvar.com合并在一起：12345678910111213server &#123; listen 80; listen [::]:80; server_name mxvar.com,www.mxvar.com; charset utf-8; root &lt;your website directory&gt;; index index.html; return 301 https://www.mxvar.com$request_uri; location / &#123; try_files $uri $uri/ =404; &#125;&#125;将root后面修改为自己的网站文件根目录,在这里我们使用301来重定向请求。修改443端口请求将默认的监听443端口的server的server_name的值改为带www的，同时另外新建一个监听443端口的server，此时，这个server_name的值为不带www的，分别具体如下：12345server &#123; listen 443 default_server ssl; server_name www.mxvar.com;# 你的SSL详细配置&#125;12345server &#123; listen 443; server_name mxvar.com; return 301 https://www.mxvar.com$request_uri;&#125;这里我们同样使用的301响应重定向。使用rewrite也能达到同样的效果，但是，在性能上，使用301要比使用rewrite来实现要好很多。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[ASP.NET Core Web API使用EF Core Code First模式]]></title>
      <url>%2F2018%2F01%2F20%2Fefcodefirst%2F</url>
      <content type="text"><![CDATA[EF Core 介绍Entity Framework(EF) Core 是Entity Framework 的一个轻量级和可扩展的版本。EF Core 是一个ORM(对象关系映射)，它使.NET开发人员可以直接使用.NET对象来操作数据库，消除了大部分的数据访问代码，开发通常只需要编写对象即可。EF Core支持多种数据库引擎，例如:Microsft SQL ServerSQLiteNpgsqlMySQLMicosoft SQL Server Compact EditionIBM Data ServersInMemory获取EF Core通过NuGet包管理器来获取需要使用的数据库支持，这里以SQL Server为例：1Install-Package Microsoft.EntityFrameworkCore.SqlServer模型EF Core是通过一个模型进行数据访问的。模型由实体类和表示与数据库中的会话组成，允许你查询和保存数据派生的上下文。可以从现有的数据库生成模型，也可以手工编写模型来匹配自己的数据库，或者使用 EF 迁移来完成从模型生成数据库，也就是Database First和Code First。下面来写一个上下文(Context),添加EFDbContext.cs并添加如下语句:1234567891011using Microsoft.EntityFrameworkCore;namespace EcustAPI.Models&#123; public class EFDbContext: DbContext &#123; public EFDbContext(DbContextOptions&lt;EFDbContext&gt; options):base(options) &#123; &#125; public DbSet&lt;Person&gt; Person &#123; get; set; &#125; &#125;&#125;添加Person.cs并添加如下模型(Model):123456789101112using System.ComponentModel.DataAnnotations;namespace EcustAPI.Models&#123; public class Person &#123; [Key] public int PersonId &#123; get; set; &#125; public string Name &#123; get; set; &#125; public int Age &#123; get; set; &#125; &#125;&#125;在Startup.cs中配置数据库连接,在ConfigureServices方法中加入下面配置:123services.AddEntityFrameworkSqlServer() .AddDbContext&lt;EFDbContext&gt;( options =&gt; options.UseSqlServer(Configuration.GetConnectionString("SqlServer")));在appsettings.json中加入数据库连接字符串,在根节点添加如下项:123 "ConnectionStrings": &#123; "SqlServer": "Data Source=***.database.windows.net;Initial Catalog=MSDataBase;Integrated Security=False;User ID=***;Password=***;Connect Timeout=30;Encrypt=True;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False"&#125;上面的数据库字符串需要更换为自己的数据库连接字符串。查询实体类的实例可以使用语言集成查询(LINQ)在数据库中查询检索：1234567using ( var db=new EFDbContext())&#123; var person=db.Person .Where(p=&gt;p.Age&gt;=18) .OderBy(b=&gt;b.PersonId) .ToList();&#125;保存数据使用实体类的实例在数据库中添加数据：123456789using (var db=new EFDbContext())&#123; var person=new Person&#123; Name="Mary", Age=35 &#125;; db.Person.Add(person); db.SaveChanges();&#125;Code First下面通过一个ASP.NET Core Web API的实例来使用学习EF Core First，也就是通过EF迁移来完成从模型生成数据库。本实例使用下面环境：Microsoft Visual Studio Professional 2017 Version 15.5.4.NET Core 2.0SQL Server 2008新建项目新建项目，选择.NET Core，然后选择ASP.NET Core Web Application,将其命名为EFCoreDemo。如下图所示：单击OK按钮以后，出现模板对话框；选择Web API模板，身份验证默认为No Authentication，上面的.NET Core版本选择为最新的版本，这里是ASP.NET Core 2.0，然后单击OK,Visual Studio开始自动创建模板文件。引用EF Core在项目右键，打开NuGet包管理器，搜索Microsoft.EntityFrameworkCore.SqlServer这个包，并安装它。如图所示：创建模型实体在项目中添加一个Models文件夹，然后在Models文件夹内通过右键快捷菜单新建一个类，这里命名为Person.cs，并在Person.cs中添加如下代码：123456789101112using System.ComponentModel.DataAnnotations;namespace EFCoreDmoe.Models&#123; public class Person &#123; [Key] public int PersonId &#123; get; set; &#125; public string Name &#123; get; set; &#125; public int Age &#123; get; set; &#125; &#125;&#125;继续新建一个类DataContext.cs，添加上下文代码：12345678910using Microsoft.EntityFrameworkCore;namespace EFCoreDmoe.Models&#123; public class DataContext:DbContext &#123; public DataContext(DbContextOptions&lt;DataContext&gt; options):base(options)&#123; &#125; public DbSet&lt;Person&gt; Person &#123; get; set; &#125; &#125;&#125;创建数据库打开Startup.cs文件，在ConfigureServices添加如下代码：1234567public void ConfigureServices(IServiceCollection services)&#123; services.AddEntityFrameworkSqlServer() .AddDbContext&lt;DataContext&gt;( options =&gt; options.UseSqlServer(Configuration.GetConnectionString("SqlServer"))); services.AddMvc();&#125;在appsettings.json中加入数据库连接字符串,在根节点添加如下项:123 "ConnectionStrings": &#123; "SqlServer": "Data Source=127.0.0.1;Initial Catalog=MyData;Persist Security Info=True;User ID=sa;Password=Sa1234"&#125;在这里，使用的是本地数据库，数据库名称为MyData。下面开始通过模型开始创建数据库，这里使用dotnet ef命令来进行迁移以及更新。打开Package Manager Console窗口,首先输入1Add-Migration Migrations没有报错，然后继续输入：1Update-Database提示Done.完成，然后我们打开数据库查看EF Core创建的数据库是不是符合我们的要求。嗯，对，符合我们的要求，PersonId作为主键，并且是从1开始自增的。我们先通过SQL语句插入几条数据。123INSERT INTO MyData.dbo.Person(Name,Age)Values ('Tom',22)INSERT INTO MyData.dbo.Person(Name,Age)Values ('Jack',21)INSERT INTO MyData.dbo.Person(Name,Age)Values ('Mary',18)查看下已经插入的数据：项目使用在Controllers文件夹上右键，Add-&gt;Controller，因为我们的项目是Web API,所以选择API Controller with actions,using Entity Framework,单击Add,在弹出的窗口中，Model class下拉框选择之前我们新建的实体类Person (EFCoreDmoe.Models),Data context class下拉框选择之前我们给实体类建立的上下文DataContext (EFCoreDmoe.Models)，Controller name自动为我们生成了实体类名的复数形式PeopleController(感谢宇宙第一IDE——Visual Studio)，我们就不修改了，直接点击Add即可。VS自动给我们配置好了路由，所以，我们直接点击IIS Express启动调试即可，因为访问的默认的路由是ValueController，不出问题的话，我们访问people控制器1http://localhost:62438/api/people将上面的端口号替换为自己的端口号即可。结果如图：教程结束。参考书籍：《ASP.NET Core 跨平台开发从入门到实战》 张剑桥 编著 2017年5月第1版]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[解决Windows 10 spotlight锁屏壁纸不更新问题]]></title>
      <url>%2F2018%2F01%2F15%2Frecover-spotlight%2F</url>
      <content type="text"><![CDATA[不知从什么时候开始，我的PC设置的 Spotlight 壁纸突然就是不更新了，一直是默认图片，尝试过将Spotlight的图片文件夹删除也没能恢复更新，后面想到之前遇到过Windows 10 照片应用不能正常工作，自己是通过重装这个应用解决的，然后尝试重装Spotlight这个应用来试试.按Windows+S后输入Windows powershell,右键选择管理员运行。在PowerShell中输入下面命令:1Get-AppxPackage –alluser在列表中找到Name为Microsoft.Windows.ContentDeliveryManager的包名，记录下这个包名的InstallLocation的值，在这里，它的值为1C:\Windows\SystemApps\Microsoft.Windows.ContentDeliveryManager_cw5n1h2txyewy接着下面的命令：1Add-AppxPackage –disabledevelopment –register [installlocation]\Appxmanifest.xml将其中的installlocation更换为上面记录的值，那么，替换后的命令为：1Add-AppxPackage –disabledevelopment –register C:\Windows\SystemApps\Microsoft.Windows.ContentDeliveryManager_cw5n1h2txyewy\Appxmanifest.xml回车，然后再进设置将锁屏壁纸重新设为锁屏聚焦，重启电脑即可恢复正常。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[WPF使用MahApps.Metro UI库]]></title>
      <url>%2F2018%2F01%2F10%2Fwpf_mahapps_metro%2F</url>
      <content type="text"><![CDATA[MahApps.Metro是Paul Jenkins在2011年开始的一个项目，它是一种将Metro风格的用户界面引入WPF应用程序的简单方法。本文将向您介绍MahApps.Metro的工作原理以及如何将其整合到WPF应用程序中。安装新建一个WPF解决方案:在Visual Studio 中通过 NuGet 包管理器来安装MahApps.Metro:修改 XAML 文件在安装了MahApps.Metro之后:打开MainWindow.xaml文件将下面的属性添加到打开的Windows标签中(引入命名空间):xmlns:Controls=&quot;clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro&quot;或者xmlns:Controls=&quot;http://metro.mahapps.com/winfx/xaml/controls&quot;将&lt;Window&gt;标签修改为&lt;Controls:MetroWindow&gt;标签效果如图:代码如下:123456789101112&lt;Controls:MetroWindow x:Class="MahAppDemo.MainWindow" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:local="clr-namespace:MahAppDemo" xmlns:Controls="http://metro.mahapps.com/winfx/xaml/controls" mc:Ignorable="d" Title="MainWindow" Height="350" Width="525"&gt; &lt;Grid&gt; &lt;/Grid&gt;&lt;/Controls:MetroWindow&gt;修改后台代码打开MainWindow.xaml.cs文件，添加using MahApps.Metro.Controls;的引用，同时将基类Window改为MetroWindow:代码如下:123456789101112131415using MahApps.Metro.Controls;namespace MahAppDemo&#123; /// &lt;summary&gt; /// Interaction logic for MainWindow.xaml /// &lt;/summary&gt; public partial class MainWindow: MetroWindow &#123; public MainWindow() &#123; InitializeComponent(); &#125; &#125;&#125;或者直接去掉基类Window即可:代码如下：12345678910111213namespace MahAppDemo&#123; /// &lt;summary&gt; /// Interaction logic for MainWindow.xaml /// &lt;/summary&gt; public partial class MainWindow &#123; public MainWindow() &#123; InitializeComponent(); &#125; &#125;&#125;引入资源样式打开App.xaml文件:在&lt;Application.Resources&gt;内添加&lt;ResourceDictionary&gt;，代码如下:12345678910111213141516171819&lt;Application x:Class="MahAppDemo.App" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:local="clr-namespace:MahAppDemo" StartupUri="MainWindow.xaml"&gt; &lt;Application.Resources&gt; &lt;ResourceDictionary&gt; &lt;ResourceDictionary.MergedDictionaries&gt; &lt;!-- MahApps.Metro resource dictionaries. Make sure that all file names are Case Sensitive! --&gt; &lt;ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" /&gt; &lt;ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" /&gt; &lt;ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml" /&gt; &lt;!-- Accent and AppTheme setting --&gt; &lt;ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/Blue.xaml" /&gt; &lt;ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseLight.xaml" /&gt; &lt;/ResourceDictionary.MergedDictionaries&gt; &lt;/ResourceDictionary&gt; &lt;/Application.Resources&gt;&lt;/Application&gt;启动验证在MainWindow.xaml中添加一些控件测试:123456789101112131415161718&lt;Controls:MetroWindow x:Class="MahAppDemo.MainWindow" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:local="clr-namespace:MahAppDemo" xmlns:Controls="http://metro.mahapps.com/winfx/xaml/controls" mc:Ignorable="d" Title="MainWindow" Height="350" Width="525"&gt; &lt;Grid&gt; &lt;StackPanel HorizontalAlignment="Center"&gt; &lt;Label Margin="20"&gt;Hello World&lt;/Label&gt; &lt;TextBox&gt;&lt;/TextBox&gt; &lt;Button&gt;Click Me&lt;/Button&gt; &lt;/StackPanel&gt; &lt;/Grid&gt;&lt;/Controls:MetroWindow&gt;启动效果图：最后附上MahApps.Metro UI的官网:http://mahapps.com/，GitHub地址:https://github.com/MahApps/MahApps.Metro]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[npm 官方源替换为淘宝源]]></title>
      <url>%2F2018%2F01%2F07%2Fnpm-registry%2F</url>
      <content type="text"><![CDATA[因为npm的官方源服务器在国外，所以对于中国的开发者来说，通过npm安装package不修改源将会是件很痛苦的事情。有三种方法来设置npm源:通过命令行设置1npm --registry https://registry.npm.taobao.org info underscore通过config设置1npm config set registry https://registry.npm.taobao.org修改.npmrc文件设置在~/.npmrc文件中加入以下内容:1registry = https://registry.npm.taobao.org检查设置结果在命令行键入:1npm get registry将会显示npm源:]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Ubuntu软件源更换为国内源]]></title>
      <url>%2F2017%2F08%2F26%2Fubuntusources%2F</url>
      <content type="text"><![CDATA[Ubuntu默认的软件源是Ubuntu自己的服务器，那么，由于你懂得的原因，国内访问这个软件源速度及其缓慢。备份原来的源文件首先，进入源sources.list所在的目录:1cd /ect/apt/然后执行备份指令:1sudo cp sources.list sources.list.bak期间需要输入超级用户root的密码。修改源文件的内容通过以下指令打开sources.list文件:1sudo vim sources.list然后将sources.list文件内容替换为下面的阿里源内容:1234567891011121314151617#deb包deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse ##测试版源 deb http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse # 源码 deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse ##测试版源 deb-src http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse # Canonical 合作伙伴和附加 deb http://archive.canonical.com/ubuntu/ xenial partner deb http://extras.ubuntu.com/ubuntu/ xenial main或者下面的腾讯源：12345678deb-src http://mirrors.tencentyun.com/old-archives/ubuntu lucid main restricted universe multiversedeb-src http://mirrors.tencentyun.com/old-archives/ubuntu lucid-updates main restricted universe multiversedeb-src http://mirrors.tencentyun.com/old-archives/ubuntu lucid-security main restricted universe multiversedeb-src http://mirrors.tencentyun.com/old-archives/ubuntu lucid-backports main restricted universe multiversedeb http://mirrors.tencentyun.com/old-archives/ubuntu lucid main restricted universe multiversedeb http://mirrors.tencentyun.com/old-archives/ubuntu lucid-updates main restricted universe multiversedeb http://mirrors.tencentyun.com/old-archives/ubuntu lucid-security main restricted universe multiversedeb http://mirrors.tencentyun.com/old-archives/ubuntu lucid-backports main restricted universe multiverse或者下面的网易源:12345678910deb http://mirrors.163.com/ubuntu/ wily main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ wily-security main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ wily-updates main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ wily-proposed main restricted universe multiversedeb http://mirrors.163.com/ubuntu/ wily-backports main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ wily main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ wily-security main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ wily-updates main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ wily-proposed main restricted universe multiversedeb-src http://mirrors.163.com/ubuntu/ wily-backports main restricted universe multiverse或者下面的中科大源:12345678910deb http://mirrors.ustc.edu.cn/ubuntu/ xenial main restricted universe multiversedeb http://mirrors.ustc.edu.cn/ubuntu/ xenial-security main restricted universe multiversedeb http://mirrors.ustc.edu.cn/ubuntu/ xenial-updates main restricted universe multiversedeb http://mirrors.ustc.edu.cn/ubuntu/ xenial-proposed main restricted universe multiversedeb http://mirrors.ustc.edu.cn/ubuntu/ xenial-backports main restricted universe multiversedeb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial main restricted universe multiversedeb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial-security main restricted universe multiversedeb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial-updates main restricted universe multiversedeb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial-proposed main restricted universe multiversedeb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse最后输入:qw保存退出。更新软件列表和已安装的软件使用下面的指令来更新获取阿里源提供的软件列表:1sudo apt-get update使用下面的指令来更新软件:1sudo apt-get upgrade]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[更改Windows CMD以及Powershell字体为Consolas]]></title>
      <url>%2F2017%2F08%2F25%2Fcmdfont%2F</url>
      <content type="text"><![CDATA[CMD是Command的缩写.即命令提示符（CMD），是在OS / 2 ， Windows CE与Windows NT平台为基础的操作系统（包括Windows 2000和XP中， Vista中，和Server 2003 ）下的“MS-DOS 方式”。中文版Windows XP 中的命令提示符进一步提高了与DOS 下操作命令的兼容性，用户可以在命令提示符直接输入中文调用文件,微软在Windows 7及之后引入了Powershell——一款比CMD更加强大的命令工具。中文版Windows 10操作系统的CMD以及Powershell界面默认的字体是新宋体，对于写代码的人来说，看新宋体下的英文相当难受，还是看微软自带的Consolas看起来舒服。在Windows 7之前的系统中，可以直接更改CMD的字符编码，但是在Windows 10中已经不能直接更改字符编码了。那么，我们只能通过更改注册表的方式来修改CMD 和Powershell字符编码。注册表修改字符编码按Windows+R进入Run,输入regedit,回车进入注册表。在注册表地址栏输入1HKEY_CURRENT_USER\Console\%SystemRoot%_system32_cmd.exe回车后双击右边的CodePage这一注册表项，勾选Base中的Decimal一项(目的是将数值以十进制显示)，然后将Value data中的数值改为437，确认后再打开CMD，右键标题栏，选择属性，选择字体,将字体改为Consolas,保存后字体就变成了Consolas了。对于Powershell,在注册表地址栏输入1Computer\HKEY_CURRENT_USER\Console\%SystemRoot%_System32_WindowsPowerShell_v1.0_powershell.exe同样将CodePage中的数值改为437,保存即可。最终的效果图P.S.MS-DOS为以下国家和语言提供字符集：代码描述65001UTF-8字符集1258越南语1257波罗的语1256阿拉伯语1255希伯来语1254土耳其语1253希腊语1252拉丁 1 字符 (ANSI)1251西里尔语1250中欧语言950繁体中文949朝鲜语936简体中文（默认）932日语874泰国语866俄文850多语种 (MS-DOS Latin1)437MS-DOS 美国英语]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[使用Fiddler抓包拦截用户请求、伪造表单数据]]></title>
      <url>%2F2017%2F08%2F12%2Ffiddler%2F</url>
      <content type="text"><![CDATA[Fiddler是位于客户端和服务器端的HTTP代理，也是目前最常用的http抓包工具之一 。 它能够记录客户端和服务器之间的所有 HTTP请求，可以针对特定的HTTP请求，分析请求数据、设置断点、调试web应用、修改请求的数据，甚至可以修改服务器返回的数据，功能非常强大，是web调试的利器。使用右键编辑Request选择需要重新发送执行的Request请求这里以www.baidu.com 搜索为例子，我们一开始的搜索内容是测试，然后我们需要编辑此次Request请求，修改表单其中的wd的键值，然后继续提交表单请求：修改表单内容右键点击需要修改的Request，Replay-&gt;Reissue and Edit,右侧栏选择Inspectors，然后修改QueryString栏目下面的wd右边的内容，我们这里改为游戏这个关键词。提交表单内容点击下面的Run to Completion来提交修改后的请求，我们可以看到返回的信息已经成了游戏的搜索内容了。使用bpu命令拦截更加好的方式是使用bpu命令拦截特定网址前缀的请求，当需要拦截的网址前缀到达Fiddler的代理服务器时，会自动拦截下来，此时，请求停止发送，Fiddle会在任务栏闪动提示用户进一步操作。这里仍然以www.baidu.com搜索为例：使用命令定制拦截需求在左侧栏的下面的黑色输入框输入一下命令1bpu www.baidu.com其含义是指拦截以wwww.baidu.com开头的所有请求，需要清除拦截规则的话，命令栏直接输入bpu回车即可。网页端输入测试这个关键词，然后点击搜索，Fiddler此时会变红，是在提示需要用户进一步的操作。修改表单内容然后在右侧栏选择Inspectors，然后修改QueryString栏目下面的wd右边的内容，我们这里改为游戏这个关键词。提交表单内容点击下面的Run to Completion来提交修改后的请求，我们可以看到返回的信息已经成了游戏的搜索内容了，而搜索框仍然是修改请求之前的测试关键词。P.S. 最后给一个修改了微博iPhone 客户端的UA的效果图，测试设备是iPhone 6s,拦截发微博时的Request请求，修改其中的UA为iPhone 9,2(这是iPhone 7 Plus的机型识别型号),然后提交请求即可。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Nginx启用HSTS使浏览器强制跳转HTTS访问]]></title>
      <url>%2F2017%2F08%2F06%2Faddhsts%2F</url>
      <content type="text"><![CDATA[在网站全站HTTPS后，如果用户手动敲入网站的HTTP地址，或者从其它地方点击了网站的HTTP链接，通常依赖于服务器端的301/302重定向跳转才能使用HTTPS服务。而第一次的HTTP请求就有可能被劫持，导致请求无法到达服务器，从而构成HTTPS降级劫持。这个问题目前可以通过HSTS(HTTP Strict Transport Security，RFC6797)来解决。HSTS简介HSTS(HTTP Strict Transport Security)是国际互联网工程组织IETF发布的一种互联网安全策略机制。采用HSTS策略的网站将保证浏览器始终连接到该网站的HTTPS加密版本，不需要用户手动在URL地址栏中输入加密地址，以减少会话劫持风险。HSTS响应头格式1Strict-Transport-Security: max-age=expireTime [; includeSubDomains] [; preload]在Nginx启用HSTS打开vim /etc/nginx/sites-available/default,在server中的443端口添加1add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";重启Nginx最后重启Nginx即可。1service nginx restart]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Ubuntu添加系统调用]]></title>
      <url>%2F2017%2F06%2F22%2Flinuxsyscall%2F</url>
      <content type="text"><![CDATA[系统调用（System Call）是操作系统为在用户态运行的进程与硬件设备（如CPU、磁盘、打印机等）进行交互提供的一组接口。当用户进程需要发生系统调用时，CPU 通过软中断切换到内核态开始执行内核系统调用函数.我们需要完成：下载最新版本的Linux内核源代码，在Linux系统中解压缩，大致观察内核源代码的组成结构。然后编译这个版本的内核代码，并尝试用编译出的内核重新引导系统。添加一个新的系统调用，完成任意一个功能，重新编译和运行内核，使新的系统调用可用。编写一个用户态的程序，使用增加的系统调用，以证明它确实可以用。开发环境：Linux 发行版 Ubuntu 16.10VMware Workstation Pro 12.6Linux 内核版本 4.11.6虚拟机分配内存：4GB虚拟机分配空间：50GB SSD在VMware Workstation上安装Ubuntu 16.10;进入Ubuntu系统，更新软件源代码.1sudo apt-get install update下载编译过程中的所需的软件依赖包.1234sudo apt-get install libncurses5-dev libssl-dev sudo apt-get install build-essential openssl sudo apt-get install zlibc minizip sudo apt-get install libidn11-dev libidn11依赖包说明：libncurses5-dev :主要是在make menuconfig时能够出现图形化的选择菜单所依赖的的库libssl-dev : openssl的依赖包build-essential：建立debian软件包的工具openssl ：涉及到系统安全的编译过程中的相关程序的依赖库zlibc ：允许运行中的文件能够实现解压缩数据文件的一个工具minizip ：是一个轻量级的支持库，能够支持压缩、提取、查看和操作ZIP文件。该软件包包括minizip和miniunzip工具libidn11-dev ： 涉及到系统帮助等文档以及软件库等信息的一个软件包通过git下载Linux 内核 4.11.6.1git clone git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git以root管理权限解压内核到 /usr/src/.12sudo cd /usr/srcsudo tar -xvf linux-4.11.6.tar.xzUbuntu安装Vim编辑器.1sudo apt-get install vim用Vim打开/kernel/sys.c文件，加入linkage.h的头文件,在文件末尾加入要加入的系统调用函数.1sudo vim linux-4.11.6/kernel/sys.c加入系统调用函数声明。在linux-4.11.6/arch/x86/include/asm/syscalls.h 中加入asmlinkage void sys_quicksort(int [],int,int);1sudo vim linux-4.11.6/arch/x86/include/asm/syscalls.h加入系统调用号。在linux-4.11.6/arch/x86/entry/syscalls/syscall_64.tbl.1sudo vim linux-4.11.6/arch/x86/entry/syscalls/syscall_64.tbl编译内核和安装内核.123sudo make mrproper sudo make clean sudo make menuconfig根据自己处理器的最大线程数目来编译.1sudo make -j4编译后安装内核到系统中.12sudo make modules_install sudo make install重启加载内核.编写程序验证系统调用.123456789101112#include&lt;stdio.h&gt;#define QUICK_SORT 334int main()&#123; int i,a[]=&#123;9,20,36,10,1,2,6,4,5,8&#125;; syscall(QUICK_SORT,a,0,9); for(i=0;i&lt;10;i++) &#123; printf(“%d\t”,a[i]); &#125; return 0;&#125;编译C程序:12 gcc -o test test.c./test]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Google Chrome被劫持事件]]></title>
      <url>%2F2017%2F05%2F19%2Findexpage%2F</url>
      <content type="text"><![CDATA[今天打开Chrome浏览器，发现Chrome浏览器的主页被重定向到了垃圾网站hao123去了，作为一名程序员，最可耻这种未经用户允许就篡改主页来赚取流量的行为！再说了，这种垃圾网站怎么能作为首页呢？反复调查得知，Chrome浏览器不是直接被更改掉了主页，而是在快捷启动的目标一栏中加入了参数，导致每次通过快捷方式启动Chrome浏览器的时候，浏览器会首先访问加入参数的网站，如图所示：可以很清楚的看到启动参数后面被加入了http://hao643.com这个网站，去Whois上查询了这个域名的信息：然后又顺手查了下这个HICHINA ZHICHENG TECHNOLOGY LTD.的信息，发现很早就有人就揭露这个公司喜欢篡改用户主页来赚取巨额流量的丑恶行径。再一次鄙视(╬▔皿▔)凸这种恶心行为。原以为解决方法是删除目标后面的启动参数就行了，然而，万万没想到的是：电脑一重启，那个Chrome的快捷方式又被篡改了，真是好气啊！然后我又查看了系统的启动项、当前运行的服务以及系统的计划任务，均没有发现可疑的进程。最后想想是不是每次开机的时候系统都会执行某个脚本来篡改快捷方式呢？因为这种方式极为隐蔽，脚本一被执行，就看不到任何的信息。下载WMI Event ViewerWMI tools：微软官方出的系统检测工具。WMI工具包括：WMI CIM Studio：查看和编辑类，属性，限定词和在CIM储存库的实例;选定的运行方式;生成并编译MOF文件。 WMI对象浏览器：视图对象，编辑属性值和限定词和运行方法。这个软件网上很容易找到，这里就不提供了。删除恶意脚本以管理员方式启动WMI Event Viewer(否则后面无法进行删除操作)，点击左上角的Register for Events;在Connect to namespace:窗口中点击OK,默认不用输入密码，继续点击OK;点击EventFilter.Name=&#39;VBScriptLKLive_filter&#39;这一栏查看这个VB脚本的信息，如图：从图中可以很清晰的看出，的确是这个脚本篡改了浏览器的快捷方式，那么，我们只要回到上一个窗口，删除这个脚本即可解决问题。重启验证高兴的是，重启后，Chrome的快捷方式没有再被篡改了。P.S. 这个示例告诉我们一定要从正规的网站下载软件，千万不要运行来历不明的软件。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[解决fontawesome-webfont.woff2 404问题]]></title>
      <url>%2F2017%2F05%2F18%2Ffont404%2F</url>
      <content type="text"><![CDATA[问题详情如图所示，每次加载服务器上的fontawesome-webfont.woff2字体时，直接报404(Not Found)的错误，然而进入服务器发现这个字体是存在的，后来发现原来是IIS服务器的不认woff2格式的文件。解决方法找到出错的原因所在，解决这个问题就很容易了。在IIS控制台添加MIME类型，使IIS识别我们的woff2格式的字体。测试验证重新访问我们的网站，查看Console，看是否有错误输出。很好，问题已经解决:)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Workflow插件 - 『豆瓣最新电影』]]></title>
      <url>%2F2017%2F04%2F21%2Fworkflow_doubanmovie%2F</url>
      <content type="text"><![CDATA[程序员有三大美德： 傲慢，懒惰以及缺乏耐性。当然这里的懒惰是指花费最少的力气，尽可能地节省时间来干更多的事情，而本文介绍的Workflow正是这样的一款可以帮助我们达到目的的App.北京时间2017年3月23日星期四，苹果对Workflow 完成了收购。这款应用初期是由三个人的团队来开发，2015年Workflow 获得了Apple Design Award大奖:这款应用后来是由四人团队开发，被Apple收购后并入Apple公司。Workflow 不但有人性化的图形界面和易于理解的拖拽式交互，还内置了许多动作，可以省下使用者用来思考或操作的时间。比如你可以用 Apple 的 API 获取 iTunes Store 和 App Store 里商品的信息，但这个动作做出来会偏复杂。于是 Workflow 就直接提供了一组动作，可以非常直观地实现这个功能。下面来讲讲一个下午完成的『豆瓣最新电影』插件:准备豆瓣最新电影的API这个API可以从这里找到豆瓣API，可以看到这个API返回的是一段JSON数据：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146&#123; "count": 20, "start": 0, "total": 25, "subjects": [ &#123; "rating": &#123; "max": 10, "average": 7.3, "stars": "40", "min": 0 &#125;, "genres": [ "动作", "犯罪" ], "title": "速度与激情8", "casts": [ &#123; "alt": "https://movie.douban.com/celebrity/1041020/", "avatars": &#123; "small": "https://img3.doubanio.com/img/celebrity/small/53186.jpg", "large": "https://img3.doubanio.com/img/celebrity/large/53186.jpg", "medium": "https://img3.doubanio.com/img/celebrity/medium/53186.jpg" &#125;, "name": "范·迪塞尔", "id": "1041020" &#125;, &#123; "alt": "https://movie.douban.com/celebrity/1044707/", "avatars": &#123; "small": "https://img3.doubanio.com/img/celebrity/small/196.jpg", "large": "https://img3.doubanio.com/img/celebrity/large/196.jpg", "medium": "https://img3.doubanio.com/img/celebrity/medium/196.jpg" &#125;, "name": "道恩·强森", "id": "1044707" &#125;, &#123; "alt": "https://movie.douban.com/celebrity/1018991/", "avatars": &#123; "small": "https://img3.doubanio.com/img/celebrity/small/44470.jpg", "large": "https://img3.doubanio.com/img/celebrity/large/44470.jpg", "medium": "https://img3.doubanio.com/img/celebrity/medium/44470.jpg" &#125;, "name": "查理兹·塞隆", "id": "1018991" &#125; ], "collect_count": 87640, "original_title": "The Fate of the Furious", "subtype": "movie", "directors": [ &#123; "alt": "https://movie.douban.com/celebrity/1009396/", "avatars": &#123; "small": "https://img3.doubanio.com/img/celebrity/small/4451.jpg", "large": "https://img3.doubanio.com/img/celebrity/large/4451.jpg", "medium": "https://img3.doubanio.com/img/celebrity/medium/4451.jpg" &#125;, "name": "F·加里·格雷", "id": "1009396" &#125; ], "year": "2017", "images": &#123; "small": "https://img3.doubanio.com/view/movie_poster_cover/ipst/public/p2444256500.webp", "large": "https://img3.doubanio.com/view/movie_poster_cover/lpst/public/p2444256500.webp", "medium": "https://img3.doubanio.com/view/movie_poster_cover/spst/public/p2444256500.webp" &#125;, "alt": "https://movie.douban.com/subject/26260853/", "id": "26260853" &#125;, &#123; "rating": &#123; "max": 10, "average": 6.5, "stars": "35", "min": 0 &#125;, "genres": [ "喜剧", "动画", "奇幻" ], "title": "蓝精灵：寻找神秘村", "casts": [ &#123; "alt": "https://movie.douban.com/celebrity/1040983/", "avatars": &#123; "small": "https://img3.doubanio.com/img/celebrity/small/414.jpg", "large": "https://img3.doubanio.com/img/celebrity/large/414.jpg", "medium": "https://img3.doubanio.com/img/celebrity/medium/414.jpg" &#125;, "name": "黛米·洛瓦托", "id": "1040983" &#125;, &#123; "alt": "https://movie.douban.com/celebrity/1004593/", "avatars": &#123; "small": "https://img1.doubanio.com/img/celebrity/small/9747.jpg", "large": "https://img1.doubanio.com/img/celebrity/large/9747.jpg", "medium": "https://img1.doubanio.com/img/celebrity/medium/9747.jpg" &#125;, "name": "雷恩·威尔森", "id": "1004593" &#125;, &#123; "alt": "https://movie.douban.com/celebrity/1013768/", "avatars": &#123; "small": "https://img1.doubanio.com/img/celebrity/small/57068.jpg", "large": "https://img1.doubanio.com/img/celebrity/large/57068.jpg", "medium": "https://img1.doubanio.com/img/celebrity/medium/57068.jpg" &#125;, "name": "乔·曼根尼罗", "id": "1013768" &#125; ], "collect_count": 803, "original_title": "Smurfs: The Lost Village", "subtype": "movie", "directors": [ &#123; "alt": "https://movie.douban.com/celebrity/1014327/", "avatars": &#123; "small": "https://img3.doubanio.com/img/celebrity/small/1359185145.13.jpg", "large": "https://img3.doubanio.com/img/celebrity/large/1359185145.13.jpg", "medium": "https://img3.doubanio.com/img/celebrity/medium/1359185145.13.jpg" &#125;, "name": "凯利·阿斯博瑞", "id": "1014327" &#125; ], "year": "2017", "images": &#123; "small": "https://img1.doubanio.com/view/movie_poster_cover/ipst/public/p2443742358.webp", "large": "https://img1.doubanio.com/view/movie_poster_cover/lpst/public/p2443742358.webp", "medium": "https://img1.doubanio.com/view/movie_poster_cover/spst/public/p2443742358.webp" &#125;, "alt": "https://movie.douban.com/subject/19899718/", "id": "19899718" &#125;, ], "title": "正在上映的电影-北京"&#125;因为服务器限制，这个JSON共包含了20个subject数据,由于篇幅过长，这里截取了2个subject,每个subject是一部电影的信息，包括title,yaer等其他信息。解析JSON数据Workflow中的Get Variable可以很容易将JSON作为Dictionary以&lt;key,value&gt;的形式提取出来,这里首先是导出20个subject的内容，此时是输出20个电影的信息。解析每部电影的信息从上一步得到的是一个List数组，现在需要遍历这个List数组来提取出每部电影的详细信息，所以这里需要用到Repeat with Each这个Action用来循环，这里主要提取title,year,average，images这四个key的value值，对应这部电影的标题，上映年代，评分以及电影封面。输出信息这里是用的Workfow的Notification这个Action，也就是iOS的通知信息，当然，也可以选择其他的方式，比如HTML。结语Workflow是一款很有创造力和拓展性的App,用他我们可以实现很多在iOS中本来不能实现或者很难实现的Action.期待你的创意:)最后展示下使用过程：P.S. 『豆瓣最新电影』已经分享在了Workflow中了，点此]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[IIS7以上网站重定向到HTTPS]]></title>
      <url>%2F2017%2F04%2F14%2Fhttps-redirect%2F</url>
      <content type="text"><![CDATA[前面博客文章提到了使用JavaScript来强制使访问HTTP的页面来跳转到对应的HTTPS页面，嗯，毕竟Google Chrome 浏览器已经把未启用SSL的网站直接标记为不安全了，直接使用JavaScript来跳转的话，会使SEO出现很大的问题，导致百度蜘蛛无法抓取到自己的网站，搜索引擎也就无法收录了，使用下面的URL Rewrite方案即可解决这一问题。安装URL Rewrite模块IIS7及以上安装URL Rewrite模块，下载URI Rewrite模块扩展，点击安装，重启IIS。在URL Rewrite配置重定向规则打开URL Rewrite模块;点击右侧栏的添加规则;选择空白规则;Name可以随便填写，Requested URL选择为Matches the Pattern,Using选择为Regular Expressions,Patter填写为(.*);在条件中添加如下两条记录：在动作一栏中添加如下:Redirect URL填写为https://{HTTP_HOST}:443/{R:1} 注意这里是花括号，不是小括号，Redirect type选择为 Permanent(301)，也就是永久性重定向,最后选择应用即可；]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[使用VS Code写PHP并进行调试]]></title>
      <url>%2F2017%2F03%2F23%2Fvscode%2F</url>
      <content type="text"><![CDATA[VS Code（Visual Studio Code）是由微软研发的一款免费、开源的跨平台文本（代码）编辑器。先从官网下载安装好VS Code.官方下载地址是https://code.visualstudio.com/安装PHP套件，这是用的是XAMPP套件(集成Apache,MySQL,FileZilla,Mercury,Tomcat等开发环境)。下载链接 https://www.apachefriends.org/zh_cn/index.html打开VS Code,安装 php-debug扩展，Ctrl +P,输入 ext install php-debug 回车，点击安装扩展。配置用户的设置：配置PHP路径：​将 php.validate.executablePath”: “G:/xampp/php/php.exe” 当然，后面的路径要根据XAMPP的安装路径来更改，还有就是要在上条语句后面加个英文状态下的逗号。将PHP文件置于Apache的启动目录下：启动Apache服务器：打开PHP文件，在指定行按F9设置断点然后启动调试.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Windows 10 开启上帝模式]]></title>
      <url>%2F2017%2F02%2F14%2Fgodmode%2F</url>
      <content type="text"><![CDATA[从Windows Vista 时代开始，微软就在系统中加入了上帝模式，来方便开发者或支持人员快速更改系统的设置，无需在菜单只中一个一个查找选项。接下来就是上帝模式在 Windows 10 中的开启方法:在桌面新建一个文件夹。将刚才的文件夹重命名，重命名为 GodMode.{ED7BA470-8E54-465E-825C-99712043E01C} ，然后保存即可。这时候就会惊奇地发现一个命名为GodMode 的文件出现，其图标和控制面板一样。双击打开，发现其布局和控制面板差不多，只是内容是更加丰富。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[解决在Outlook中添加QQ邮箱提醒账户设置过期的问题]]></title>
      <url>%2F2016%2F11%2F24%2Fqq_mail%2F</url>
      <content type="text"><![CDATA[很多人在outlook邮箱中添加QQ邮箱或者163邮箱后，系统会不时提醒邮箱账户设置已过期，重新添加后仍然出现此提示，很是烦人。以下以QQ邮箱作为示例：首先登录QQ邮箱的网页版，进入设置-&gt;账户 找到如下图所示的选项：把POP3/SMTP服务和IMAP/SMTP服务开启，点击生成授权码。按照图中的操作说明，用绑定的手机来发送图中要求的一串字符到指定的号码(如果不知道手机号码或者号码遗失，就只能申诉了)，发送后，点击图中的”我已发送”按钮，腾讯服务器确认身份后会生成如图所示的授权码：复制授权码，在Outlook邮箱添加账户的时候，输入邮箱地址，密码栏粘贴刚才生成的授权码，点击登录即可。如果验证通过，会提示设置成功，这样以后就不会再出现邮箱账户过期的提示了。P.S.163邮箱也是同样的操作。什么是授权码？QQ邮箱官方给的解释是：授权码是QQ邮箱推出的，用于登录第三方客户端的专用密码。适用于登录以下服务：POP3/IMAP/SMTP/Exchange/CardDAV/CalDAV服务。温馨提醒：为了你的帐户安全，更改QQ密码以及独立密码会触发授权码过期，需要重新获取新的授权码登录。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[IIS 强制启用HTTPS跳转]]></title>
      <url>%2F2016%2F11%2F20%2Fhttps_config%2F</url>
      <content type="text"><![CDATA[HTTPS（全称：Hyper Text Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL。 它是一个URI scheme（抽象标识符体系），句法类同http:体系。用于安全的HTTP数据传输。https:URL表明它使用了HTTP，但HTTPS存在不同于HTTP的默认端口及一个加密/身份验证层（在HTTP与TCP之间）。这个系统的最初研发由网景公司(Netscape)进行，并内置于其浏览器Netscape Navigator中，提供了身份验证与加密通讯方法。自从百度启用https搜索并且优先收录https网站后，越来也多的站点开始部署https，那么在部署https的过程了会遇到一个问题，那就是http自动跳转https的问题，因为过去很长一段时间，大部分网站都是http访问，突然换成https访问，很多人还反应不过来，所以我们网站需要设置http自动跳转到https，那么https配置过程中不同的服务器版本配置http自动跳转https方法上面存在差异。修改以下文件：IIS6.0 路径：C:\WINDOWS\Help\iisHelp\common\403-4.htm IIS7.0以上路径：C:\inetpub\custerr\zh-CN\403.htm 将上述的文件更改为：12345678910111213&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;该页必须通过安全通道查看&lt;/TITLE&gt;&lt;META HTTP-EQUIV=”Content-Type” Content=”text/html; charset=GB2312″&gt;&lt;/HEAD&gt;&lt;BODY&gt;&lt;script type=”text/javascript”&gt; var url = window.location.href; if (url.indexOf(“https”) &lt; 0) &#123; url = url.replace(“http:”, “https:”); window.location.replace(url);&#125;&lt;/script&gt;&lt;/BODY&gt;&lt;/HTML&gt;同时在IIS6中，站点属性–&gt;目录安全性–&gt;编辑中把”要求安全通道（SSL）”勾选上.在IIS7、8中，SSL设置–&gt;把”要求SSL”勾选.现在网站能够实现访问http页面强制跳转https页面了:)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[提取Windows 10的锁屏聚焦壁纸]]></title>
      <url>%2F2016%2F11%2F12%2FspotLight%2F</url>
      <content type="text"><![CDATA[聚焦(Spotlight)是Windows 10相对于以前的Windows版本新增的一款提供锁屏壁纸的功能。非常漂亮的图片只能显示在锁屏上，是不是很可惜，想要将此作为壁纸或者其他用途，该怎么办呢？下面开始提取聚焦壁纸。1.按win+R调出运行窗口或者在资源管理器的地址栏输入1%localappdata%\Packages\Microsoft.Windows.ContentDeliveryManager_cw5n1h2txyewy\LocalState\Assets就会进入聚焦壁纸的文件夹Assets,能看见很多没有格式后缀名的文件。2.在Assets文件夹下按shift+鼠标右键，选择从此处打开命令窗口，输入1ren *.* *.jpg回车，将所有文件重命名为.jpg文件，这时候就能看到原本只能在锁屏上显示的图片了，是不是很漂亮？下面展示我的电脑上面的聚焦壁纸：P.S. Assets文件夹里面不仅包括PC上的聚焦壁纸，还包括展示在锁屏上的应用图标，如：网易云音乐，Xbox应用；同时还包含Windows 10 Mobile手机上面的聚焦壁纸，选择按照Size 大小排序即可分辨。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[处理UWP程序的Back后退键]]></title>
      <url>%2F2016%2F11%2F11%2FUWP-back-btn%2F</url>
      <content type="text"><![CDATA[什么是UWPUWP即Windows 10 中的Universal Windows Platform简称。即Windows通用应用平台，在Windows 10 Mobile(Lumia 系列等)/Surface(Windows平板电脑）/PC/Xbox/HoloLens等平台上运行，UWP不同于传统PC上的exe应用,并且和只适用于手机端的app有本质区别。它并不是为某一个终端而设计，而是可以在所有Windows10设备上运行。一款UWP应用针对各平台的代码大部分都是通用的（一个项目），只有很小一部分是平台特定的。在发布到应用商店时需要针对不同平台（处理器）分别编译。介绍完什么是UWP，下面谈谈在UWP应用程序开发的过程中必须要处理的问题。UWP应用程序的后退按钮是需要开发者自己处理的。因为在新建Project 的时候，项目模板并不包含后退键的处理代码。下面开始后退按钮的处理方法：首先，新建一个空白项目：空白模板建立成功后，我们需要对此项目添加程序集的引用。之后打开Projcet的App.xaml.cs文件。在OnLaunched方法中 添加如下判断代码：12if ("Windows.Mobile" == Windows.System.Profile.AnalyticsInfo.VersionInfo.DeviceFamily) Windows.Phone.UI.Input.HardwareButtons.BackPressed += HardwareButtons_BackPressed;用来判断程序运行的设备是否是Mobile。然后同样在App.xaml.cs文件中添加以下方法：123456789private void HardwareButtons_BackPressed(object sender, Windows.Phone.UI.Input.BackPressedEventArgs e)&#123; var rootFrame = Window.Current.Content as Frame; if (rootFrame.CanGoBack) &#123; rootFrame.GoBack(); e.Handled = true; &#125;&#125;此方法是注册按下后退按钮的事件，用来返回上一个页面。以上就可以正确处理UWP程序的后退按钮。P.S.如何在后退时保持前一个页面的状态,防止被重新载入？需要在前一个页面的构造函数里加NavigationCacheMode即可，来打开页面导航的缓存。12345public MainPage()&#123; InitializeComponent(); NavigationCacheMode = NavigationCacheMode.Enabled;&#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2016%2F11%2F08%2Fhello_world%2F</url>
      <content type="text"><![CDATA[Welcome to my Blog.这是我的第一篇博文，是一个程序员按例向这个世界打招呼的形式。在这里，我会分享很多有关Computer，Mobile以及其他有趣的事情。敬请期待!:)来自程序员的问候！C 语言版本123456#include &lt;stdio.h&gt;int main()&#123; printf("Hello World!"); return 0;&#125;More info: 我的微博]]></content>
    </entry>

    
  
  
</search>
